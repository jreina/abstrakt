{"version":3,"sources":["backend/firebase.ts","hooks/useFirestoreDoc.ts","contexts/AppStateContext.ts","hooks/useAppState.ts","components/RefSearch/RefSearch.tsx","components/NewActivity/NewActivity.tsx","components/DropButton.tsx","contexts/EntryContext.tsx","components/TimeEntryListItem/TimeEntryListItem.tsx","components/InstanceEntryListItem/InstanceEntryListItem.tsx","components/ActivityList/ActivityList.tsx","components/RecentActivity/RecentActivity.tsx","components/Intro/Intro.tsx","App.tsx","hooks/useauth.ts","index.tsx"],"names":["firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseAppAuth","auth","providers","googleProvider","GoogleAuthProvider","useFirestoreDoc","ref","useState","isLoading","data","docState","setDocState","useEffect","onSnapshot","doc","AppStateContext","React","createContext","user","useAppState","useContext","RefSearch","onSelect","firestore","collection","uid","refs","filtered","setFiltered","clearInput","handleClick","entry","event","className","htmlFor","type","id","placeholder","onKeyUp","term","target","value","results","docs","filter","x","get","includes","map","key","title","tags","autoComplete","onClick","tagLens","R","NewActivity","removeFn","selectedRef","setSelectedRef","tag","idx","add","start","moment","utc","toISOString","DropButton","dropAction","dropClicked","setDropClicked","EntryContext","undefined","EntryConsumer","Provider","Consumer","finishEntry","update","TimeEntryListItem","s","delete","join","badges","format","duration","end","diff","push","time","InstanceEntryListItem","a","async","ActivityList","entries","k","RecentActivity","orderBy","limit","Intro","signIn","withFirebaseAuth","signOut","signInWithGoogle","currentUser","initializing","state","setState","onChange","unsubscribe","onAuthStateChanged","useAuth","displayName","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fb62a859.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBP8Eo61hqQ5w_iHpCZMNBeTXwPXbhDoeY\",\r\n  authDomain: \"abstrakt-6eb75.firebaseapp.com\",\r\n  databaseURL: \"https://abstrakt-6eb75.firebaseio.com\",\r\n  projectId: \"abstrakt-6eb75\",\r\n  storageBucket: \"abstrakt-6eb75.appspot.com\",\r\n  messagingSenderId: \"133869053674\",\r\n  appId: \"1:133869053674:web:920e97064ef99e147c9993\",\r\n  measurementId: \"G-3R5QHNZBS9\"\r\n};\r\n// Initialize Firebase\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst firebaseAppAuth = firebaseApp.auth();\r\nconst providers = {\r\n  googleProvider: new firebase.auth.GoogleAuthProvider()\r\n};\r\n\r\nexport default firebaseApp;\r\nexport { providers, firebaseAppAuth };\r\n","import { useState, useEffect } from \"react\";\r\n\r\ntype FirestoreDocState<T> = {\r\n  isLoading: boolean;\r\n  data: firebase.firestore.QuerySnapshot<T> | null;\r\n};\r\n\r\nexport const useFirestoreDoc = <T>(\r\n  ref: firebase.firestore.CollectionReference<T>\r\n) => {\r\n  const [docState, setDocState] = useState<FirestoreDocState<T>>({\r\n    isLoading: true,\r\n    data: null\r\n  });\r\n\r\n  useEffect(() => {\r\n    ref.onSnapshot(doc => {\r\n      setDocState({\r\n        isLoading: false,\r\n        data: doc\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  return docState;\r\n};\r\n","import React from \"react\";\r\n\r\ninterface AppState {\r\n  user: firebase.User | null;\r\n}\r\nexport const AppStateContext = React.createContext<AppState>({ user: null});\r\n","import { useContext } from \"react\"\r\nimport { AppStateContext } from \"../contexts/AppStateContext\"\r\n\r\nexport const useAppState = () => {\r\n    const appState = useContext(AppStateContext);\r\n    return appState;\r\n}","import React, { Fragment, useState, useContext } from \"react\";\r\nimport { ReferenceEntry } from \"../../models/Entry\";\r\nimport firebaseApp from \"../../backend/firebase\";\r\nimport { useFirestoreDoc } from \"../../hooks/useFirestoreDoc\";\r\nimport { useAppState } from \"../../hooks/useAppState\";\r\n\r\ntype RefSearchProps = {\r\n  onSelect: (ref: ReferenceEntry) => void;\r\n};\r\nexport const RefSearch = ({ onSelect }: RefSearchProps) => {\r\n  const { user } = useAppState();\r\n  const ref = firebaseApp\r\n    .firestore()\r\n    .collection(`users/${(user as firebase.User).uid}/references`);\r\n\r\n  // @ts-ignore\r\n  const { data: refs } = useFirestoreDoc<ReferenceEntry>(ref);\r\n  const [filtered, setFiltered] = useState<Array<ReferenceEntry>>([]);\r\n\r\n  const clearInput = () => setFiltered([]);\r\n\r\n  const handleInputChange = (\r\n    event: React.KeyboardEvent<HTMLInputElement>\r\n  ): void => {\r\n    //@ts-ignore\r\n    const term = event.target.value;\r\n    const results =\r\n      term === \"\"\r\n        ? []\r\n        : refs.docs.filter(\r\n            (x: firebase.firestore.QueryDocumentSnapshot<ReferenceEntry>) =>\r\n              x.get(\"title\").includes(term)\r\n          );\r\n    setFiltered(\r\n      results.map(\r\n        (x: firebase.firestore.QueryDocumentSnapshot<ReferenceEntry>) =>\r\n          x.data()\r\n      )\r\n    );\r\n    if (event.key === \"Enter\") {\r\n      onSelect({\r\n        title: term,\r\n        tags: []\r\n      });\r\n      clearInput();\r\n    }\r\n  };\r\n\r\n  const handleClick = (entry: ReferenceEntry) => (\r\n    event: React.MouseEvent<HTMLLIElement, MouseEvent>\r\n  ) => {\r\n    setFiltered([]);\r\n    onSelect(entry);\r\n    clearInput();\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"search\" className=\"sr-only\">\r\n          search for a ref\r\n        </label>\r\n        <input\r\n          type=\"search\"\r\n          className=\"form-control\"\r\n          id=\"search\"\r\n          placeholder=\"search for a ref\"\r\n          onKeyUp={handleInputChange}\r\n          autoComplete=\"off\"\r\n        />\r\n      </div>\r\n      {filtered ? (\r\n        <ul className=\"list-group list-group-flush\">\r\n          {filtered.map(entry => (\r\n            <li\r\n              className=\"list-group-item link\"\r\n              key={entry.id}\r\n              onClick={handleClick(entry)}\r\n            >\r\n              {entry.title}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      ) : null}\r\n    </Fragment>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { ReferenceEntry } from \"../../models/Entry\";\r\nimport { RefSearch } from \"../RefSearch/RefSearch\";\r\nimport firebaseApp from \"../../backend/firebase\";\r\nimport moment from \"moment\";\r\nimport * as R from \"ramda\";\r\nimport { useAppState } from \"../../hooks/useAppState\";\r\n\r\nconst tagLens = R.lensProp(\"tags\");\r\n\r\nconst TagList = (\r\n  tags: Array<string> | undefined,\r\n  removeFn: (tag: string) => void\r\n) =>\r\n  tags\r\n    ? tags.map((tag, idx) => (\r\n        <span key={idx} className=\"badge badge-dark badge-pill\">\r\n          {tag}{\" \"}\r\n          <span className=\"link\" onClick={() => removeFn(tag)}>\r\n            x\r\n          </span>\r\n        </span>\r\n      ))\r\n    : null;\r\n\r\nexport const NewActivity = () => {\r\n  const [selectedRef, setSelectedRef] = useState<ReferenceEntry>();\r\n  const { user } = useAppState();\r\n  const handleStartClick = () => {\r\n    if (!selectedRef || !user) return;\r\n    firebaseApp\r\n      .firestore()\r\n      .collection(`users/${user.uid}/timeEntries`)\r\n      .add({\r\n        start: moment()\r\n          .utc()\r\n          .toISOString(),\r\n        title: selectedRef.title,\r\n        tags: selectedRef.tags\r\n      });\r\n\r\n    // Add reference if no ID exists on the ref\r\n    if (!selectedRef.id) {\r\n      firebaseApp\r\n        .firestore()\r\n        .collection(`users/${user.uid}/references`)\r\n        .add(selectedRef);\r\n    }\r\n  };\r\n  const handleInputChange = (\r\n    event: React.KeyboardEvent<HTMLInputElement>\r\n  ): void => {\r\n    if (event.key === \"Enter\") {\r\n      //@ts-ignore\r\n      const term = event.target.value;\r\n      setSelectedRef(R.over(tagLens, R.concat([term])));\r\n    }\r\n  };\r\n\r\n  const dropTag = (tag: string) =>\r\n    setSelectedRef(R.over(tagLens, R.filter(R.pipe(R.equals(tag), R.not))));\r\n\r\n  return (\r\n    <>\r\n      <h5>Start something new</h5>\r\n      <div className=\"card\">\r\n        <div className=\"card-body\">\r\n          <RefSearch onSelect={setSelectedRef} />\r\n\r\n          <hr />\r\n          {selectedRef ? (\r\n            <div>\r\n              <h5 className=\"card-title\">{selectedRef.title}</h5>\r\n              <div>{TagList(selectedRef.tags, dropTag)}</div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"add-tag\" className=\"sr-only\">\r\n                  add a tag\r\n                </label>\r\n                <input\r\n                  type=\"search\"\r\n                  className=\"form-control\"\r\n                  id=\"add-tag\"\r\n                  placeholder=\"add a tag...\"\r\n                  autoComplete=\"off\"\r\n                  onKeyUp={handleInputChange}\r\n                />\r\n              </div>\r\n              <button\r\n                className=\"btn btn-outline-success btn-block btn-sm\"\r\n                onClick={handleStartClick}\r\n              >\r\n                Start\r\n              </button>\r\n              <button className=\"btn btn-outline-success btn-block btn-sm\">\r\n                Instance\r\n              </button>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\ntype DropButtonProps = { dropAction: () => Promise<void> };\r\n\r\nexport const DropButton = ({ dropAction }: DropButtonProps) => {\r\n  const [dropClicked, setDropClicked] = useState(false);\r\n  return dropClicked ? (\r\n    <span>\r\n      sure?{\" \"}\r\n      <span className=\"link text-danger\" onClick={dropAction}>\r\n        yup\r\n      </span>{\" \"}\r\n      <span className=\"link\" onClick={() => setDropClicked(false)}>\r\n        nah\r\n      </span>\r\n    </span>\r\n  ) : (\r\n    <span className=\"link\" onClick={() => setDropClicked(true)}>\r\n      drop\r\n    </span>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\ninterface AppState {\r\n  user: any;\r\n}\r\nconst EntryContext = React.createContext<AppState>({ user: undefined});\r\n\r\nexport const EntryProvider = EntryContext.Provider;\r\nexport const EntryConsumer = EntryContext.Consumer;\r\n","import React from \"react\";\r\nimport { TimeEntry } from \"../../models/Entry\";\r\nimport moment from \"moment\";\r\nimport { DropButton } from \"../DropButton\";\r\nimport { EntryConsumer } from \"../../contexts/EntryContext\";\r\nimport firebaseApp from \"../../backend/firebase\";\r\n\r\nconst finishEntry = (user: any, id: string) => () => {\r\n  firebaseApp\r\n    .firestore()\r\n    .collection(`users/${user.uid}/timeEntries`)\r\n    .doc(id)\r\n    .update(\r\n      \"end\",\r\n      moment()\r\n        .utc()\r\n        .toISOString()\r\n    );\r\n};\r\n\r\nconst time = (entry: TimeEntry, user: any) => {\r\n  const badges = [\r\n    <span key=\"1\">\r\n      <em>{moment(entry.start).format(\"MM/DD HH:mm\")}</em>\r\n    </span>\r\n  ];\r\n\r\n  if (\"end\" in entry) {\r\n    const duration = moment(entry.end).diff(moment(entry.start), \"minutes\");\r\n    badges.push(\r\n      <span key=\"2\">\r\n        <em>\r\n          {\" \"}\r\n          - {moment(entry?.end).format(\"HH:mm\")} ({duration} minutes)\r\n        </em>\r\n      </span>\r\n    );\r\n  } else {\r\n    const duration = moment().diff(moment(entry.start), \"minutes\");\r\n    badges.push(\r\n      <span key=\"3\">\r\n        <em>\r\n          {\" \"}\r\n          - now ({duration} minutes){\" \"}\r\n          <span className=\"link\" onClick={finishEntry(user, entry.id)}>\r\n            finish\r\n          </span>\r\n        </em>\r\n      </span>\r\n    );\r\n  }\r\n\r\n  return badges;\r\n};\r\n\r\nconst dropForUser = (user: any, id: any) => () => {\r\n  return firebaseApp\r\n    .firestore()\r\n    .collection(`users/${user.uid}/timeEntries`)\r\n    .doc(id)\r\n    .delete();\r\n};\r\n\r\nexport const TimeEntryListItem = ({ entry }: { entry: TimeEntry }) => {\r\n  return (\r\n    <li className=\"list-group-item list-group-item-action\" key={entry.id}>\r\n      <div className=\"d-flex w-100 justify-content-between\">\r\n        <p className=\"mb-1\">{entry.title}</p>\r\n        <small>\r\n          <EntryConsumer>\r\n            {s => <DropButton dropAction={dropForUser(s.user, entry.id)} />}\r\n          </EntryConsumer>\r\n        </small>\r\n      </div>\r\n      <div className=\"d-flex w-100 justify-content-between\">\r\n        {entry.tags ? (\r\n          <small>\r\n            <em>{entry.tags.join(\", \")}</em>\r\n          </small>\r\n        ) : null}\r\n        <EntryConsumer>\r\n        {s => <small>{time(entry, s.user)}</small>}\r\n        </EntryConsumer>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { InstanceEntry } from \"../../models/Entry\";\r\nimport { DropButton } from \"../DropButton\";\r\n\r\nexport const InstanceEntryListItem = ({ entry }: { entry: InstanceEntry }) => {\r\n  return (\r\n    <li className=\"list-group-item list-group-item-action\" key={entry.id}>\r\n      <div className=\"d-flex w-100 justify-content-between\">\r\n        <p className=\"mb-1\">{entry.title}</p>\r\n        <small>\r\n          <DropButton dropAction={async () => {}} />\r\n        </small>\r\n      </div>\r\n      <div className=\"d-flex w-100 justify-content-between\">\r\n        {entry.data ? (\r\n          <small>\r\n            <em>\r\n              {typeof entry.data === \"string\"\r\n                ? entry.data\r\n                : entry?.data?.join(\", \")}\r\n            </em>\r\n          </small>\r\n        ) : null}\r\n        <small>\r\n          <em>{entry.time.format(\"MM/DD HH:mm\")}</em>\r\n        </small>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { ActivityEntry } from \"../../models/Entry\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport { TimeEntryListItem } from \"../TimeEntryListItem/TimeEntryListItem\";\r\nimport { InstanceEntryListItem } from \"../InstanceEntryListItem/InstanceEntryListItem\";\r\n\r\nexport const ActivityList = ({\r\n  entries\r\n}: {\r\n  entries?: Array<ActivityEntry>;\r\n}) => {\r\n  return (\r\n    <ul className=\"list-group\">\r\n      {entries === undefined ? (\r\n        <span className=\"d-flex justify-content-center\">\r\n          <Loader type=\"MutatingDots\" />\r\n        </span>\r\n      ) : (\r\n        entries.map((entry, k) => {\r\n          if (\"start\" in entry) {\r\n            return <TimeEntryListItem entry={entry} key={k} />;\r\n          }\r\n          else if (\"time\" in entry) {\r\n            return <InstanceEntryListItem entry={entry} key={k} />;\r\n          } \r\n          return null;\r\n        })\r\n      )}\r\n    </ul>\r\n  );\r\n};\r\n","import React, { Fragment } from \"react\";\r\nimport { ActivityEntry } from \"../../models/Entry\";\r\nimport { ActivityList } from \"../ActivityList/ActivityList\";\r\nimport firebaseApp from \"../../backend/firebase\";\r\nimport { useFirestoreDoc } from \"../../hooks/useFirestoreDoc\";\r\nimport { useAppState } from \"../../hooks/useAppState\";\r\n\r\nexport const RecentActivity = () => {\r\n  const {user} = useAppState();\r\n  const ref = firebaseApp\r\n    .firestore()\r\n    .collection(`users/${(user as firebase.User).uid}/timeEntries`)\r\n    .orderBy(\"start\", \"desc\")\r\n    .limit(10);\r\n\r\n  // @ts-ignore\r\n  const { data: entries } = useFirestoreDoc<ActivityEntry>(ref);\r\n\r\n  return (\r\n    <Fragment>\r\n      <h5>Recent</h5>\r\n      <ActivityList\r\n        entries={entries?.docs.map(\r\n          (x: firebase.firestore.QueryDocumentSnapshot<ActivityEntry>) => ({\r\n            id: x.id,\r\n            ...x.data()\r\n          })\r\n        )}\r\n      />\r\n    </Fragment>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Intro = ({ signIn }: any) => (\r\n  <div className=\"col-md-12\">\r\n    <div className=\"jumbotron\">\r\n      <h2 className=\"display-4\">Welcome to abstrakt</h2>\r\n      <p className=\"lead\"><em>take control of your time</em></p>\r\n      <button className=\"btn btn-outline-dark\" onClick={signIn}>Sign in with Google</button>\r\n    </div>\r\n  </div>\r\n);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport { NewActivity } from \"./components/NewActivity/NewActivity\";\r\nimport { RecentActivity } from \"./components/RecentActivity/RecentActivity\";\r\nimport { TimeEntry, ActivityEntry, ReferenceEntry } from \"./models/Entry\";\r\nimport firebaseApp, { providers, firebaseAppAuth } from \"./backend/firebase\";\r\nimport withFirebaseAuth from \"react-with-firebase-auth\";\r\nimport { AppStateContext } from \"./contexts/AppStateContext\";\r\nimport { useAuth } from \"./hooks/useauth\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport { Intro } from \"./components/Intro/Intro\";\r\n\r\ntype AppState = {\r\n  recent: Array<ActivityEntry>;\r\n  unfinished: Array<TimeEntry>;\r\n  references: Array<ReferenceEntry>;\r\n};\r\n\r\nfunction App({ signOut, signInWithGoogle }: any) {\r\n  const { initializing, user } = useAuth();\r\n\r\n  return (\r\n    <div className=\"container-xl\">\r\n      {!initializing && !user ? <Intro signIn={signInWithGoogle}/> : null}\r\n      {!initializing && user ? (\r\n        <AppStateContext.Provider value={{ user }}>\r\n          <div className=\"row\">\r\n            <div className=\"col-md-12\">\r\n              <p>\r\n                Hello, {user.displayName} [\r\n                <span className=\"link\" onClick={signOut}>\r\n                  sign out\r\n                </span>\r\n                ]\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col-md-4\">\r\n              <NewActivity />\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              <RecentActivity />\r\n            </div>\r\n          </div>\r\n        </AppStateContext.Provider>\r\n      ) : (\r\n        null\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withFirebaseAuth({\r\n  providers,\r\n  firebaseAppAuth\r\n})(App);\r\n","import { useState, useEffect } from \"react\";\r\nimport firebase from \"firebase\";\r\n\r\nexport const useAuth = () => {\r\n  const [state, setState] = useState(() => {\r\n    const user = firebase.auth().currentUser;\r\n    return { initializing: !user, user };\r\n  });\r\n  function onChange(user: any) {\r\n    setState({ initializing: false, user });\r\n  }\r\n\r\n  useEffect(() => {\r\n    // listen for auth state changes\r\n    const unsubscribe = firebase.auth().onAuthStateChanged(onChange);\r\n    // unsubscribe to the listener when unmounting\r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  return state;\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}